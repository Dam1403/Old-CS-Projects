	/*
			if(!isKeysInit){
				for(;currSubKey < 16777216; currSubKey++){

					subKey1[0] = (byte)(currSubKey >>> 16);
					subKey1[1] = (byte)(currSubKey >>> 8);
					subKey1[2] = (byte)(currSubKey);

					tmp1 = theAddition(rotateR8(pt1),pt2);
					pt1R2 =  xOR(subKey1,tmp1);


					pt2R2 = xOR(rotateL3(pt2), pt1R2);

					tmp1 = theAddition(rotateR8(pt1R2), pt2R3);
					pt1R3 = xOR(rotateL3(pt2R2),pt2R3);
					subKey2 = xOR(tmp1,pt1R3);

					if((currSubKey & 1048575) == 0){
						System.out.println(currSubKey);
					}

					if(!xOR(pt1R3, rotateL3(pt2R2)).equals(pt2R3)){
						//System.out.println("FOUND " + Arrays.toString(xOR(pt1R3, rotateL3(pt2R2))));
						//System.out.println("pt2R3 " + Arrays.toString(pt2R3));
						continue;
					}
					//System.out.println("Test " + Arrays.toString(xOR(pt1R3, rotateL3(pt2R2))));
					//System.out.println("pt2R3 " + Arrays.toString(pt2R3));
					//MAKE MORE MEMORY EFFIECIENT BY TESTING SUBKEY PAIRS AS THEY COME OUT
					tmp1 = theAddition(rotateR8(pt1R3),pt2R3);
					subKey3 = xOR(tmp1,ct1);

					subKey1 = subkeys.pop();
					pt1R2 = xOR(theAddition(rotateR8(pt1), pt2),subKey1);
					pt2R2 = xOR(pt1R2,rotateL3(pt2));

					subKey2 = subkeys.pop();
					pt1R3 = xOR(theAddition(rotateR8(pt1R2), pt2R2),subKey2);
					pt2R3 = xOR(pt1R3,rotateL3(pt2R2));

					subKey3 = subkeys.pop();
					pt1Fin = xOR(theAddition(rotateR8(pt1R3), pt2R3),subKey3);
					pt2Fin = xOR(pt1R3,rotateL3(pt2R3));

					if(pt1Fin == ct1 & pt2Fin == ct2 ){
						solkeys.add(subKey1);
						solkeys.add(subKey2);
						solkeys.add(subKey3);
						System.out.println(Hex.toString(subKey1));

					}
					System.out.println(Hex.toString(subKey1));

				}
				isKeysInit = true;
				System.out.println(subkeys.size());
			}
				 */
				 
				 
				 
				 int subkeySize = subkeys.size();
				for(int index = 0 ; index < subkeySize;index++){
					subKey1 = subkeys.pop();
					pt1R2 = xOR(theAddition(rotateR8(pt1), pt2),subKey1);
					pt2R2 = xOR(pt1R2,rotateL3(pt2));

					subKey2 = subkeys.pop();
					pt1R3 = xOR(theAddition(rotateR8(pt1R2), pt2R2),subKey2);
					pt2R3 = xOR(pt1R3,rotateL3(pt2R2));

					subKey3 = subkeys.pop();
					pt1Fin = xOR(theAddition(rotateR8(pt1R3), pt2R3),subKey3);
					pt2Fin = xOR(pt1R3,rotateL3(pt2R3));

					if(pt1Fin == ct1 & pt2Fin == ct2 ){
						solkeys.add(subKey1);
						solkeys.add(subKey2);
						solkeys.add(subKey3);
						System.out.println(Hex.toString(subKey1));

					}
				}
				subkeys = solkeys;